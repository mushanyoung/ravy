#!/usr/bin/env python3

import os
import sys
import zipfile
import argparse
import shutil

def zip_folder(folder_path, output_file):
    with zipfile.ZipFile(output_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, start=os.path.dirname(folder_path))
                zipf.write(file_path, arcname)

def main():
    parser = argparse.ArgumentParser(description="Compress top-level subfolders to individual zip files.")
    parser.add_argument("path", help="Path to the directory containing the subfolders.")
    parser.add_argument("--archive", action="store_true", help="Move the original folders to an 'archive' subfolder after compression and exclude the 'archive' folder from compression.")

    args = parser.parse_args()

    if not os.path.isdir(args.path):
        print("Error: The specified path is not a directory.")
        sys.exit(1)

    if args.archive:
        archive_path = os.path.join(args.path, "archive")
        if not os.path.exists(archive_path):
            os.makedirs(archive_path)

    for folder_name in os.listdir(args.path):
        if args.archive and folder_name == "archive":
            continue

        folder_path = os.path.join(args.path, folder_name)
        if os.path.isdir(folder_path):
            print(f"Compressing {folder_name}...")
            output_file = os.path.join(args.path, f"{folder_name}.zip")
            zip_folder(folder_path, output_file)
            if args.archive:
                archived_folder = os.path.join(archive_path, folder_name)
                shutil.move(folder_path, archived_folder)
            print(f"Compressed {folder_name} successfully.")

if __name__ == "__main__":
    main()
