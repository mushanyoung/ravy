#!/usr/bin/env python3

import os
import sys
from pathlib import Path
from pyunpack import Archive
import zipfile
import shutil

def extract_files(file_path, output_folder):
    file_path = Path(file_path)
    file_name = file_path.stem
    output_folder = output_folder / file_name

    # Ensure output folder exists
    output_folder.mkdir(parents=True, exist_ok=True)

    Archive(file_path).extractall(output_folder)

    # Check if there's a single top-level folder
    content = list(output_folder.iterdir())
    if len(content) == 1 and content[0].is_dir():
        temp_folder = output_folder / "temp"
        content[0].rename(temp_folder)
        for item in temp_folder.iterdir():
            item.rename(output_folder / item.name)
        temp_folder.rmdir()

def compress_folder(folder_path, zip_path):
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, _, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, folder_path)
                zipf.write(file_path, arcname)

def remove_temp_folder(temp_folder):
    shutil.rmtree(temp_folder)

def main():
    if len(sys.argv) < 2:
        print("Usage: python process_folder.py <folder_name1> <folder_name2> ...")
        sys.exit(1)

    for folder_path in sys.argv[1:]:
        if not os.path.exists(folder_path) or not os.path.isdir(folder_path):
            print(f"Folder not found: {folder_path}")
            sys.exit(1)

        normalized_folder_path = os.path.normpath(folder_path)
        folder_name = os.path.basename(normalized_folder_path)
        temp_folder = os.path.join(normalized_folder_path, "temp")

        for root, _, files in os.walk(normalized_folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                ext = os.path.splitext(file)[-1].lower()
                if ext in ['.zip', '.rar', '.7z', '.tar.gz']:
                    try:
                        print(f"Extracting {file_path}...")
                        extract_files(file_path, Path(temp_folder))
                        print(f"Extraction completed: {file_path}")
                    except Exception as e:
                        print(f"Error extracting {file_path}: {e}")

        output_zip = os.path.join(normalized_folder_path, "..", f"{folder_name}.zip")
        print(f"Compressing files into {output_zip}...")
        compress_folder(temp_folder, output_zip)
        print(f"Compression completed: {output_zip}")

        # Remove temp folder
        print(f"Removing temp folder: {temp_folder}...")
        remove_temp_folder(temp_folder)
        print(f"Temp folder removed: {temp_folder}")

if __name__ == "__main__":
    main()
