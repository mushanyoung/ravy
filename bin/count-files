#!/usr/bin/env python3
"""
Counts files within each subfolder up to a specified depth.
The output is sorted hierarchically: subfolders appear before their
parent and are sorted by their total file count.
"""
import argparse
from pathlib import Path
from typing import Any, Dict, Generator, List, Tuple

# Type alias for the recursive tree node structure
TreeNode = Dict[str, Any]


def count_files_in_tree(directory: Path) -> int:
    """Recursively counts all files in a given directory tree."""
    file_count: int = 0
    try:
        for item in directory.rglob("*"):
            if item.is_file():
                file_count += 1
    except PermissionError:
        return -1  # Indicates a permission error
    return file_count


def find_folders_up_to_depth(start_path: Path, max_depth: int) -> List[Path]:
    """Finds all directories from a starting path up to a maximum depth."""
    if max_depth < 0:
        return []
    all_folders: List[Path] = [start_path]
    folders_to_scan: List[Path] = [start_path]
    for _ in range(max_depth):
        next_level_folders: List[Path] = []
        for folder in folders_to_scan:
            try:
                subdirs = [item for item in folder.iterdir() if item.is_dir()]
                all_folders.extend(subdirs)
                next_level_folders.extend(subdirs)
            except PermissionError:
                continue
        folders_to_scan = next_level_folders
        if not folders_to_scan:
            break
    return all_folders


def get_sorted_results(tree_node: TreeNode) -> Generator[Tuple[Path, int], None, None]:
    """
    Recursively traverses the file tree using a post-order traversal,
    yielding sorted children before their parent.
    """
    # 1. Get all immediate children and sort them by their file count
    children: List[TreeNode] = list(tree_node["children"].values())
    sorted_children: List[TreeNode] = sorted(children, key=lambda item: item["count"])

    # 2. Recursively yield the results from each sorted child FIRST
    for child in sorted_children:
        yield from get_sorted_results(child)

    # 3. Finally, yield the parent folder itself LAST
    yield (tree_node["path"], tree_node["count"])


def main() -> None:
    """Parses arguments and orchestrates the folder finding and counting."""
    parser = argparse.ArgumentParser(
        description="Count files per folder with hierarchical post-order sorting.",
        epilog="Example: python count_typed.py -d 2",
    )
    parser.add_argument(
        "-d",
        "--depth",
        type=int,
        default=1,
        help="Max depth of subfolders to analyze (default: 1).",
    )
    args = parser.parse_args()

    start_path: Path = Path.cwd()
    print(f"🔍 Analyzing folders in '{start_path}' up to depth {args.depth}...\n")

    # Build a tree structure from the folders found
    folders_to_process: List[Path] = find_folders_up_to_depth(start_path, args.depth)
    file_tree: TreeNode = {"path": start_path, "count": 0, "children": {}}

    for folder in folders_to_process:
        count = count_files_in_tree(folder)
        if folder == start_path:
            file_tree["count"] = count
            continue

        current_level: TreeNode = file_tree
        path_parts: Tuple[str, ...] = folder.relative_to(start_path).parts
        for part in path_parts:
            current_level = current_level["children"].setdefault(part, {"children": {}})

        current_level["path"] = folder
        current_level["count"] = count

    # Flatten the tree using the new post-order sorting logic
    sorted_items: Generator[Tuple[Path, int], None, None] = get_sorted_results(file_tree)

    # Print the formatted results
    print(f"{'Total Files':^12} | {'Path'}")
    print(f"{'-'*12:->} | {'-'*60:->}")

    for path, count in sorted_items:
        relative_path: Path = path.relative_to(start_path)
        count_str: str = f"{count:,}" if count != -1 else "No Access"
        print(f"{count_str:^12} | {str(relative_path)}")


if __name__ == "__main__":
    main()
