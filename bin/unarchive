#!/usr/bin/env python3

import os
import sys
from pathlib import Path
from pyunpack import Archive


def extract_files(file_path, password=None):
    file_path = Path(file_path)
    file_name = file_path.stem
    output_folder = file_path.parent / file_name

    # Ensure output folder exists
    output_folder.mkdir(parents=True, exist_ok=True)

    # Extract with optional password
    archive_options = {"password": password} if password else {}
    Archive(file_path, **archive_options).extractall(output_folder)

    # Check if there's a single top-level folder
    content = list(output_folder.iterdir())
    while len(content) == 1 and content[0].is_dir():
        temp_folder = output_folder / "temp"
        content[0].rename(temp_folder)
        for item in temp_folder.iterdir():
            item.rename(output_folder / item.name)
        temp_folder.rmdir()
        content = list(output_folder.iterdir())


def main():
    if len(sys.argv) < 2:
        print("Usage: python unarchive <compressed_file1> <compressed_file2> ...")
        sys.exit(1)

    default_password = ""  # 可以更改为你的默认密码
    password = default_password or input(
        "Enter password (press Enter to use default): "
    )

    for file_path in sys.argv[1:]:
        if not os.path.exists(file_path):
            print(f"File not found: {file_path}")
            continue

        ext = os.path.splitext(file_path)[-1].lower()
        if ext not in [".zip", ".rar", ".7z", ".tar.gz"]:
            print(f"Unsupported file extension: {file_path}")
            continue

        try:
            print(f"Extracting {file_path}...")
            extract_files(file_path, password)
            print(f"Extraction completed: {file_path}")
        except Exception as e:
            print(f"Error extracting {file_path}: {e}")


if __name__ == "__main__":
    main()
